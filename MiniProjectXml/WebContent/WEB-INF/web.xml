<?xml version="1.0" encoding="UTF-8"?>
<web-app version="4.0"
	xmlns="http://xmlns.jcp.org/xml/ns/javaee"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://xmlns.jcp.org/xml/ns/javaee                       
						http://xmlns.jcp.org/xml/ns/javaee/web-app_4_0.xsd">
						
						
	<!-- Java에서는 MultipartResolver 관련은 SprignConfigClass.java 작성 -->
	<!-- xml에서는 web.xml에 담는다 -->
						
	<!-- 현재 웹 애플리케이션에서 받아 들이는 모든 요청에 대해 appServlet이라는 이름으로 정의되어 있는
	Servlet을 사용하겠다. -->
	<servlet-mapping>
        <servlet-name>appServlet</servlet-name>
        <url-pattern>/</url-pattern>
    </servlet-mapping>
    
    <!-- 요청 정보를 분석해서 컨트롤러를 선택하는 Servlet을 지정한다. -->
    <servlet>
        <servlet-name>appServlet</servlet-name>
        <!-- Spring MVC에서 제공하고 있는 기본 Servlet을 지정한다. -->
        <servlet-class>org.springframework.web.servlet.DispatcherServlet</servlet-class>
        <!-- Spring MVC 설정을 위한 xml파일을 지정한다. -->
        <init-param>
            <!-- DispatcherServlet가 가지고 있는 contextConfigLocation에 value를 집어 넣겠다. -->
        	<param-name>contextConfigLocation</param-name>
        	<param-value>/WEB-INF/config/servlet-context.xml</param-value>
        </init-param>
        <load-on-startup>1</load-on-startup>
        
        
        
        <!-- multipartResolver -->
        <multipart-config>
        	<max-file-size>52428800</max-file-size>
        	<max-request-size>524288000</max-request-size>
        	<file-size-threshold>0</file-size-threshold>
        </multipart-config>
        
        
    </servlet>
    
    <!-- Bean을 정의할 xml 파일을 지정한다. -->
    <context-param>
    	<param-name>contextConfigLocation</param-name>
    	<param-value>/WEB-INF/config/root-context.xml</param-value>
    </context-param>
    
    <!-- 리스너 설정(서버를 가동하면 servlet-context.xml과 root-context.xml을 읽어서 Bean들을 구성 -->
    <listener>
    	<listener-class>org.springframework.web.context.ContextLoaderListener</listener-class>
    </listener>
    
    <!-- 파라미터 인코딩 필터 설정 -->
    <filter>
    	<filter-name>encodingFilter</filter-name>
    	<filter-class>org.springframework.web.filter.CharacterEncodingFilter</filter-class>
    	
    	<init-param>
    		<param-name>encoding</param-name>
    		<param-value>UTF-8</param-value>
    	</init-param>
    	
    	<init-param>
    		<param-name>forceEncoding</param-name>
    		<param-value>true</param-value>
    	</init-param>
    </filter>
    
    <filter-mapping>
    	<filter-name>encodingFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    
    
    <!-- 어떠한 요청 정보가 발생하면 id가 multipartResolver인 Bean을 이용해 요청을 처리한다. -->
    <filter> 
    	<display-name>springMultipartFilter</display-name>
    	<filter-name>springMultipartFilter</filter-name>
    	<filter-class>org.springframework.web.multipart.support.MultipartFilter</filter-class>
    	<init-param>
    		<param-name>multipartResolverBeanName</param-name>
    		<param-value>multipartResolver</param-value>
    	</init-param>
    </filter>
    
    
    <!-- url mapping (클라이언트가 요청한 모든 요청 정보에 대해서 통과할 수 있도록 세팅) -->
    <filter-mapping>
    	<filter-name>springMultipartFilter</filter-name>
    	<url-pattern>/*</url-pattern>
    </filter-mapping>
    
    
    
</web-app>